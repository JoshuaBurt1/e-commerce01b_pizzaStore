{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container1\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<form id=\\\"pizzaForm\\\" data-v-469af010><header class=\\\"mb-4\\\" data-v-469af010><h2 data-v-469af010>Cult of Personality Pizza</h2></header><!-- Part 3: Pizza options--><div class=\\\"mb-3\\\" data-v-469af010><label for=\\\"customerSelect\\\" class=\\\"form-label\\\" data-v-469af010>Enter customer name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"customerSelect\\\" name=\\\"customerName\\\" placeholder=\\\"Enter your name\\\" data-v-469af010></div><div class=\\\"mb-3\\\" data-v-469af010><label for=\\\"sizeSelect\\\" class=\\\"form-label\\\" data-v-469af010>Select Size</label><select class=\\\"form-select\\\" id=\\\"sizeSelect\\\" name=\\\"pizzaSize\\\" data-v-469af010><option value=\\\"\\\" disabled selected data-v-469af010>Please choose...</option></select></div><div id=\\\"toppingSelectC\\\" class=\\\"mb-3\\\" data-v-469af010><label class=\\\"form-label\\\" data-v-469af010>Select Toppings</label><br data-v-469af010></div><div class=\\\"mb-3\\\" data-v-469af010><label for=\\\"dipSelect\\\" class=\\\"form-label\\\" data-v-469af010>Select Dip</label><select class=\\\"form-select\\\" id=\\\"dipSelect\\\" name=\\\"pizzaDip\\\" data-v-469af010><option value=\\\"\\\" disabled selected data-v-469af010>Please choose...</option></select></div><div class=\\\"mb-3\\\" data-v-469af010><label for=\\\"sideSelect\\\" class=\\\"form-label\\\" data-v-469af010>Select Side</label><select class=\\\"form-select\\\" id=\\\"sideSelect\\\" name=\\\"pizzaSide\\\" data-v-469af010><option value=\\\"\\\" disabled selected data-v-469af010>Please choose...</option></select></div><div class=\\\"mb-3\\\" data-v-469af010><button type=\\\"button\\\" class=\\\"btn btn-primary view\\\" data-v-469af010>View Order</button><button type=\\\"reset\\\" class=\\\"btn btn-secondary clear\\\" data-v-469af010>Clear</button><button type=\\\"submit\\\" class=\\\"btn btn-success pay\\\" data-v-469af010>Checkout</button></div><p id=\\\"message\\\" class=\\\"mb-3\\\" data-v-469af010></p><p id=\\\"price\\\" class=\\\"mb-3\\\" data-v-469af010></p></form>\", 1);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_3]);\n}","map":{"version":3,"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["C:\\Users\\Josh\\Desktop\\WebDev\\JS\\COMP2068JavaScript-ExpressGenerator\\storeexample1-vue\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"container1\">\n    <form id=\"pizzaForm\">\n      <header class=\"mb-4\">\n        <h2>Cult of Personality Pizza</h2>\n      </header>\n\n      <!-- Part 3: Pizza options-->\n      <div class=\"mb-3\">\n        <label for=\"customerSelect\" class=\"form-label\">Enter customer name</label>\n        <input type=\"text\" class=\"form-control\" id=\"customerSelect\" name=\"customerName\" placeholder=\"Enter your name\">\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"sizeSelect\" class=\"form-label\">Select Size</label>\n        <select class=\"form-select\" id=\"sizeSelect\" name=\"pizzaSize\">\n          <option value=\"\" disabled selected>Please choose...</option>\n        </select>\n      </div>\n\n      <div id=\"toppingSelectC\" class=\"mb-3\">\n        <label class=\"form-label\">Select Toppings</label><br />\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"dipSelect\" class=\"form-label\">Select Dip</label>\n        <select class=\"form-select\" id=\"dipSelect\" name=\"pizzaDip\">\n          <option value=\"\" disabled selected>Please choose...</option>\n        </select>\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"sideSelect\" class=\"form-label\">Select Side</label>\n        <select class=\"form-select\" id=\"sideSelect\" name=\"pizzaSide\">\n          <option value=\"\" disabled selected>Please choose...</option>\n        </select>\n      </div>\n\n      <div class=\"mb-3\">\n        <button type=\"button\" class=\"btn btn-primary view\">View Order</button>\n        <button type=\"reset\" class=\"btn btn-secondary clear\">Clear</button>\n        <button type=\"submit\" class=\"btn btn-success pay\">Checkout</button>\n      </div>\n\n      <p id=\"message\" class=\"mb-3\"></p>\n      <p id=\"price\" class=\"mb-3\"></p>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n//tags\nconst price = document.getElementById(\"price\");\nconst items = [0, 0, 0, 0];\n//fields\nconst sizeSelect = document.querySelector(\"#sizeSelect\");\nconst dipSelect = document.querySelector(\"#dipSelect\");\nconst sideSelect = document.querySelector(\"#sideSelect\");\n\nconst toppingSelectC = document.getElementById(\"toppingSelectC\");\nconst toppingArray = [];\nconst toppingListC = [\n  \"none : $0\",\n  \"olive : $1\",\n  \"pepper : $2\",\n  \"pineapple : $2\",\n  \"ham : $3\",\n  \"pepperoni : $3\",\n  \"bacon : $4\",\n  \"extra cheese : $5\",\n];\n\n\n//SIZE: function to populate size drop-down menu\nfunction addSize() {\n  var sizeList = [\n    \"none : $0\",\n    \"small : $10\",\n    \"medium : $12\",\n    \"large : $15\",\n    \"extra large : $20\",\n    \"panzerotti : $14\",\n  ];\n  if (sizeSelect.length <= sizeList.length) {\n    for (let i = 0; i < sizeList.length; i++) {\n      var option = document.createElement(\"option\");\n      option.textContent = sizeList[i];\n      option.id = sizeList[i];\n      sizeSelect.appendChild(option);\n    }\n  }\n}\n\n// Toppings: Create and append checkBox buttons\ntoppingListC.forEach((topping, index) => {\n  const checkBox = document.createElement(\"input\");\n  checkBox.type = \"checkbox\";\n  checkBox.value = topping.toLowerCase();\n  checkBox.id = index;\n\n  const label = document.createElement(\"label\");\n  label.textContent = topping;\n\n  toppingSelectC.appendChild(checkBox);\n  toppingSelectC.appendChild(label);\n  toppingSelectC.appendChild(document.createElement(\"br\"));\n});\n\n// Get references to checkBox elements\nconst toppingCBs = Array.from({ length: toppingListC.length }, (_, index) =>\n  document.getElementById(index.toString())\n);\n\n// Add or remove toppings from the array\nfunction addToppingC() {\n  toppingArray.length = 0; // Clear the array\n  for (let i = 0; i < toppingCBs.length; i++) {\n    if (toppingCBs[i].checked) {\n      toppingArray.push(\" \" + toppingCBs[i].value);\n    }\n  }\n  console.log(\"ToppingArray: \" + toppingArray);\n  // String manipulations\n  const toppingString = toppingArray.toString().replace(/[:]+/g, \"\");\n  // Topping sum calculation\n  const numArray = toppingString.split(/[a-zA-Z$\\s.]+/).filter(Boolean);\n  const toppingSum = numArray.reduce((acc, num) => acc + parseInt(num), 0);\n  items[1] = toppingSum;\n}\n\n//DIPLIST: function to populate dipList\nfunction addDip() {\n  var dipList = [\n    \"none : $0\",\n    \"jalapeno : $0.50\",\n    \"habanero : $0.50\",\n    \"ghost pepper : $0.50\",\n    \"ranch : $0.50\",\n    \"three cheese : $0.50\",\n    \"sweet & sour : $0.50\",\n    \"plum : $0.50\",\n  ];\n  if (dipSelect.length <= dipList.length) {\n    for (let j = 0; j < dipList.length; j++) {\n      var option = document.createElement(\"option\");\n      option.textContent = dipList[j];\n      option.id = dipList[j];\n      dipSelect.appendChild(option);\n    }\n  }\n}\n\n//SIDELIST: function to populate sideList\nfunction addSide() {\n  var sideList = [\n    \"none : $0\",\n    \"chicken wings : $10\",\n    \"chicken bites : $12\",\n    \"garlic bread : $6\",\n    \"cheese bread : $7\",\n    \"mozarella sticks : $8\",\n    \"apple pie : $4\",\n  ];\n  if (sideSelect.length <= sideList.length) {\n    for (let k = 0; k < sideList.length; k++) {\n      var option = document.createElement(\"option\");\n      option.textContent = sideList[k];\n      option.id = sideList[k];\n      sideSelect.appendChild(option);\n    }\n  }\n}\n\n// Part 6: Create a class for the Pizza object, using the parameters from the order form you just created.\nsizeSelect.addEventListener(\"click\", addSize);\ndipSelect.addEventListener(\"click\", addDip);\nsideSelect.addEventListener(\"click\", addSide);\n\nsizeSelect.addEventListener(\"change\", function () {\n  const selectedSize = sizeSelect.value.split(\" : $\");\n  //console.log(size.textContent);\n  items[0] = Number(selectedSize[1]);\n});\n\ntoppingCBs.forEach((checkBox) => {\n  checkBox.addEventListener(\"click\", addToppingC);\n});\n\ndipSelect.addEventListener(\"change\", function () {\n  const selectedDip = dipSelect.value.split(\" : $\");\n  items[2] = Number(selectedDip[1]);\n});\nsideSelect.addEventListener(\"change\", function () {\n  const selectedSide = sideSelect.value.split(\" : $\");\n  items[3] = Number(selectedSide[1]);\n});\n\n//fields\nconst message = document.querySelector(\"#message\");\nconst view = document.querySelector(\".view\");\nconst clear = document.querySelector(\".clear\");\n\nvar pizzaCostArray = [];\n\n/* Pizza constructor*/\nclass Pizza {\n  customer;\n  size;\n  toppingC;\n  dip;\n  side;\n\n  constructor(customer, size, toppingC, dip, side) {\n    this.customer = customer;\n    this.size = size;\n    this.toppingC = toppingC;\n    this.dip = dip;\n    this.side = side;\n  }\n  //messages to assist customer\n  description() {\n    let sum = 0;\n\n    if (this.customer == \"\") {\n      message.textContent = \"Please enter your name\";\n    } else if (this.size == \"\") {\n      message.textContent = \"Please select a size\";\n    } else if (this.toppingC == \"\") {\n      message.textContent = \"Please select a topping\";\n    } else if (this.dip == \"\") {\n      message.textContent = \"Please select a dip\";\n    } else if (this.side == \"\") {\n      message.textContent = \"Please select a side\";\n    } else {\n      message.textContent = \"\";\n      for (let i = 0; i < items.length; i += 1) {\n        sum += items[i];\n      }\n      if (sum == 0) {\n        message.textContent = \"You ordered nothing. Check your order and try again\";\n      } else {\n        message.textContent = `${this.customer}'s order: a ${this.size} ${this.toppingC} pizza with ${this.dip} dip, & a ${this.side} side.`;\n      }\n      price.textContent = \"Total cost: $\" + sum;\n    }\n  }\n}\n\nvar customerPizza;\n//this Pizza object needs to be instantiated for description() messages to occur in <p id=\"message\"></p>\nfunction viewOrder() {\n  let customerName = document.getElementById(\"customerSelect\").value;\n  let pizzaSize = document.getElementById(\"sizeSelect\").value;\n  // Retrieve selected toppings\n  let selectedToppings = [];\n  let toppingSelectC = document.getElementById(\"toppingSelectC\");\n  let toppingOptions = toppingSelectC.querySelectorAll('input[type=\"checkbox\"]:checked');\n  toppingOptions.forEach(option => {\n    // Remove amounts from toppings\n    let toppingLabel = option.nextElementSibling.textContent;\n    let toppingName = toppingLabel.replace(/:\\s*\\$[\\d.]+/, \"\");\n    selectedToppings.push(toppingName);\n  });\n  let pizzaToppings = selectedToppings.join(\", \");\n  let pizzaDip = document.getElementById(\"dipSelect\").value;\n  let pizzaSide = document.getElementById(\"sideSelect\").value;\n  // Remove amounts from other values\n  customerName = customerName.replace(/:\\s*\\$[\\d.]+/, \"\");\n  pizzaSize = pizzaSize.replace(/:\\s*\\$[\\d.]+/, \"\");\n  pizzaDip = pizzaDip.replace(/:\\s*\\$[\\d.]+/, \"\");\n  pizzaSide = pizzaSide.replace(/:\\s*\\$[\\d.]+/, \"\");\n  customerPizza = new Pizza(customerName, pizzaSize, pizzaToppings, pizzaDip, pizzaSide);\n  customerPizza.description();\n}\n\n//function that creates an instance of Pizza using user selected values\nfunction enterOrder() {\n  pizzaCostArray = [\n    items[0], // pizza size cost\n    items[1], // topping cost\n    items[2], // dip cost\n    items[3], // side cost\n  ];\n  // Map the pizzaCostArray elements to the correct orderItems format\n  const orderItems = [\n    { id: 1, name: \"Pizza Size\", priceInCents: pizzaCostArray[0] * 100, quantity: 1 }, // pizza size cost\n    { id: 2, name: \"Topping\", priceInCents: pizzaCostArray[1] * 100, quantity: 1 }, // topping cost\n    { id: 3, name: \"Dip\", priceInCents: pizzaCostArray[2] * 100, quantity: 1 }, // dip cost\n    { id: 4, name: \"Side\", priceInCents: pizzaCostArray[3] * 100, quantity: 1 }, // side cost\n  ];\n\n  // Continue with the rest of your code\n  fetch(\"http://localhost:3000/checkout\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      items: orderItems,\n    }),\n  })\n    .then(res => {\n      if (res.ok) return res.json();\n      return res.json().then(json => Promise.reject(json));\n    })\n    .then(({ url }) => {\n      window.location = url;\n    })\n    .catch(e => {\n      console.error(e.error);\n    });\n}\n\nfunction clearOrder() {\n  toppingCBs.forEach((checkBox) => {\n    checkBox.checked = false;\n  });\n  message.textContent = \"\";\n  price.textContent = \"\";\n}\n\n// event listeners for on click event of buttons and select\nview.addEventListener(\"click\", viewOrder);\nclear.addEventListener(\"click\", clearOrder);\npizzaForm.addEventListener(\"submit\", function (event) {\n  // Prevent the default form submission behavior\n  event.preventDefault();\n  // Call enterOrder function to create the Pizza instance\n  enterOrder();\n});\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nbody {\n  margin-top: 1%;\n  line-height: 1.4;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: rgb(255,255,255,0);\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n/**/\n\n\n\n/* section styles */\nsection {\n  display: grid;\n  grid-template-rows: repeat(4, auto);\n  grid-template-columns: repeat(3, 700px);\n  grid-gap: 25px 1px;\n  justify-content: space-between;\n  margin-bottom: 5rem;\n}\n/*creates evenly sized articles*/\nsection > * {\n  flex: 0 0 auto;\n}\nsection article {\n  border: 1px solid black;\n  box-shadow: 0 2px 14px grey;\n  padding: 1.5%;\n}\narticle img {\n  margin: auto;\n  display: block;\n  height: 40%;\n}\nsection p {\n  margin: 5px 0;\n}\n\nsection ul {\n  margin-top: 0;\n}\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  background-image: url(https://static.wixstatic.com/media/ba2cd3_ec56b34e45e24ad1ad14a165a939edd9~mv2.jpg/v1/fill/w_1381,h_845,al_b,q_85,enc_auto/ba2cd3_ec56b34e45e24ad1ad14a165a939edd9~mv2.jpg);\n  background-size: cover;\n  color: white;\n  font-size: 16px;\n}\n.form-select, .form-control {\n  width:40%;\n}\n\n.container1{\n  margin-left:2%;\n}\n\np {\n  color: limegreen;\n}\nlabel{\n  color: white;\n}\nh2 {\n  text-align: center;\n  font-size: 2.5rem;\n  margin-bottom: 10px;\n  margin-right: 430px;\n  color: limegreen;\n}\n\nth {\n  font-weight: 8;\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAY;gCADzBC,kBAAA;oBAEIC,UA4CO,C;;uBA7CTC,mBAAA,CA8CM,OA9CNC,UA8CM,EA/CR,IAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}